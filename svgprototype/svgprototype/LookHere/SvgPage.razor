@page "/"
@inject IJSRuntime JS

<div @ref=@divSvg class="divSvg" @onmousemove="@OnMouseMove" @onmousedown="@OnMouseDown" @onmouseup="@OnMouseUp"
     @onmousewheel="@OnMouseWheel" @oncontextmenu:preventDefault="true" @oncontextmenu="@EmptyRightClick">
    <svg width="100%" height="100%" viewBox=@viewBox.toString()>
        @for (int i = 0; i < polygons.Count; i++)
        {
            <SvgComponent polygon=polygons[i]></SvgComponent>
        }
    </svg>
</div>

@code {
    // reference to the container div (used to get bounds with javaScript)
    ElementReference divSvg;

    // hard coded data
    List<Polygon> polygons = new List<Polygon>();
    int numPolygons = 50;
    int squareSize = 50;

    // viewbox for panning / zooming
    ViewBox viewBox = new ViewBox();
    bool isPanning = false;
    Point panStart = new Point(0, 0);
    double scale = 1.0;

    // pan / zoom settings
    double panSpeed = 1.5;
    double zoomSpeed = 0.07;

    // current mouse coords
    int currentX;
    int currentY;

    public SvgPage()
    {
        // just make a bunch of square polygons
        // (this would eventually be a bunch of points read in from the database)
        for (int i = 0; i < numPolygons; i++)
        {
            for (int j = 0; j < numPolygons; j++)
            {
                List<Point> points = new List<Point>();
                points.Add(new Point(i * squareSize, j * squareSize));
                points.Add(new Point(i * squareSize + squareSize, j * squareSize));
                points.Add(new Point(i * squareSize + squareSize, j * squareSize + squareSize));
                points.Add(new Point(i * squareSize, j * squareSize + squareSize));
                polygons.Add(new Polygon(points));
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        // set the viewbox to match the container div
        var result = await JS.InvokeAsync<BoundingClientRect>("GetBoundingClientRect", divSvg);
        viewBox.x = 0;
        viewBox.y = 0;
        viewBox.width = result.Width;
        viewBox.height = result.Height;
        StateHasChanged();
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        currentX = (int)e.OffsetX;
        currentY = (int)e.OffsetY;

        if (isPanning)
        {
            var dx = panStart.x - currentX;
            var dy = panStart.y - currentY;
            viewBox.x = viewBox.x + (dx * panSpeed * (.8 / scale));
            viewBox.y = viewBox.y + (dy * panSpeed * (.8 / scale));
            panStart = new Point(currentX, currentY);
        }
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        if (e.Button == 2) // right click
        {
            isPanning = true;
            panStart = new Point(currentX, currentY);
        }
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        if (e.Button == 2) // right click
            isPanning = false;
    }

    public async void OnMouseWheel(WheelEventArgs e)
    {
        // update the container bounds (accounts for window resizing)       todo: move this to a resize event
        var result = await JS.InvokeAsync<BoundingClientRect>("GetBoundingClientRect", divSvg);
        var divWidth = result.Width;
        var divHeight = result.Height;

        // calculate the new viewbox
        var w = viewBox.width;
        var h = viewBox.height;
        var dw = w * -Math.Sign(e.DeltaY) * zoomSpeed * (.8 / scale);
        var dh = h * -Math.Sign(e.DeltaY) * zoomSpeed * (.8 / scale);
        var dx = dw * currentX / divWidth;
        var dy = dh * currentY / divHeight;
        //var dx = dw * currentX / viewBox.width; // uncomment these two lines to see how not updating the container bounds affects zooming after window resize
        //var dy = dh * currentY / viewBox.height;

        // calculate and restrict the scale
        double newScale = divWidth / (viewBox.width - dw);
        if (newScale < .2 || newScale > 5)
            return;
        
        // set the new viewbox
        scale = newScale;
        viewBox.x = viewBox.x + dx;
        viewBox.y = viewBox.y + dy;
        viewBox.width = viewBox.width - dw;
        viewBox.height = viewBox.height - dh;
    }

    private void EmptyRightClick() { }
}
